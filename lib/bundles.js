// Generated by CoffeeScript 2.3.0
var Bundle, cush, findPackage, fs, loadFormat, path, sha256;

({findPackage, sha256} = require('./utils'));

cush = require('cush');

path = require('path');

fs = require('saxon/sync');

Bundle = require('./Bundle');

// Bundle cache
cush.bundles = Object.create(null);

// Bundle constructor
cush.bundle = function(main, opts) {
  var base, bundle, ext, file, id, pack, project, root;
  if (!opts || !opts.target) {
    throw Error('`target` option must be defined');
  }
  if (!(ext = path.extname(main))) {
    throw Error('`main` path must have an extension');
  }
  if (!path.isAbsolute(main)) {
    main = path.resolve(main);
  }
  id = sha256(main).slice(0, 7) + '.' + opts.target;
  if (opts.dev) {
    id += '.dev';
  }
  if (bundle = cush.bundles[id]) {
    return bundle;
  }
  if (!(root = findPackage(main))) {
    throw Error('`main` path must be inside a package');
  }
  pack = cush.package(root);
  if (!fs.isFile(file = main.slice(0, -ext.length) + '.' + opts.target + ext)) {
    if (!fs.isFile(file = main)) {
      throw Error('`main` path must be a file');
    }
  }
  // Create the main module.
  main = path.relative(root, file);
  (base = pack.files)[main] || (base[main] = true);
  // Create the bundle.
  bundle = new Bundle(opts.dev, opts.target);
  bundle.id = id;
  bundle.root = pack;
  bundle.main = bundle._getModule(pack.file(main), pack);
  loadFormat(bundle);
  // Load the project.
  project = cush.project(pack.path);
  project.bundles.add(bundle);
  bundle._project = project;
  cush.bundles[id] = bundle;
  return bundle._configure();
};


// Internal

loadFormat = function(bundle) {
  var ext, form, key, ref, value;
  ext = bundle.main.file.ext;
  form = cush.formats.find(function(form) {
    if (form.match) {
      return form.match(bundle);
    } else if (form.exts) {
      return form.exts.includes(ext);
    } else {
      return false;
    }
  });
  if (!form) {
    throw Error('Bundle has no matching format');
  }
  if (!form.name) {
    throw Error('Bundle format has no "name" property');
  }
  bundle.exts = form.exts && form.exts.slice(0) || [];
  bundle._format = form;
  if (form.mixin) {
    ref = form.mixin;
    for (key in ref) {
      value = ref[key];
      if (key[0] === '_') {
        Object.defineProperty(bundle, key, {value});
      } else {
        bundle[key] = value;
      }
    }
    return;
  }
};
