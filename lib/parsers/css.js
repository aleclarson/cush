// Generated by CoffeeScript 2.3.1
var after, cssTokenize, onError;

cssTokenize = require('postcss/lib/tokenize');

exports['.css'] = function(asset, pack) {
  var curr, deps, next, offset, prev, ref, start, tokenize, toks, type;
  if (asset.deps) {
    return;
  }
  tokenize = pack.tokenize || cssTokenize;
  toks = tokenize({
    css: asset.content,
    error: onError
  });
  // Default to working with postcss-scss
  toks.atrule || (toks.atrule = 'at-word');
  toks.comment || (toks.comment = 'comment');
  if (toks.evalStrings == null) {
    toks.evalStrings = true;
  }
  toks.importWord || (toks.importWord = '@import');
  if (toks.semi == null) {
    toks.semi = true;
  }
  toks.space || (toks.space = 'space');
  // Customizable helpers
  toks.getLength || (toks.getLength = function(prev) {
    return prev[1].length;
  });
  toks.isAtrule || (toks.isAtrule = function(curr) {
    return curr[0] === toks.atrule;
  });
  toks.isImport || (toks.isImport = function(curr) {
    return curr[1] === toks.importWord;
  });
  offset = 0;
  prev = null;
  curr = null;
  next = function() {
    if (prev = curr) {
      offset += toks.getLength(prev);
    }
    curr = toks.nextToken();
    return curr;
  };
  deps = [];
  while (next()) {
    type = curr[0];
    if (toks.semi && type === ';') {
      continue;
    }
    if (type === toks.space || type === toks.comment) {
      continue;
    }
    if (!toks.isAtrule(curr) || !toks.isImport(curr)) {
      break;
    }
    start = offset;
    next(); // skip ' '
    ref = next()[1];
    if (toks.evalStrings) {
      ref = eval(ref);
    }
    if (toks.semi) { // skip ';'
      next();
    }
    next(); // skip '\n'
    deps.push({
      ref: ref,
      asset: null,
      start: start,
      end: offset + 1
    });
  }
  asset.deps = deps;
};


// Helpers

after = function(type, next) {
  var tok;
  while (tok = next()) {
    if (tok[0] === type) {
      return next();
    }
  }
};

onError = function(msg, line, column) {
  var e;
  e = new Error(msg);
  e.line = line;
  e.column = column;
  throw e;
};
