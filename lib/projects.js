// Generated by CoffeeScript 2.3.1
var Emitter, Project, cush, evalFile, fs, log, path, projects, wch;

({evalFile} = require('./utils'));

Emitter = require('@cush/events');

cush = require('cush');

path = require('path');

log = require('lodge').debug('cush');

wch = require('wch');

fs = require('fs');

cush.projects = projects = Object.create(null);

cush.project = function(root) {
  return projects[root] || (projects[root] = new Project(root));
};

Project = class Project extends Emitter {
  constructor(root) {
    super();
    this.root = root;
    this.config = evalFile(path.join(root, 'cush.config.js')) || {};
    this.watcher = null;
    this.bundles = new Set;
  }

  get(main) {
    var bundles;
    if (bundles = this.config.bundles) {
      if (!path.isAbsolute(main)) {
        main = path.relative(this.root, main);
      }
      return bundles[main] || {};
    }
    return {};
  }

  watch() {
    this.watcher || (this.watcher = wch.stream(this.root, {
      only: ['cush.config.js']
    }).on('data', (evt) => {
      this.config = evalFile(evt.path) || {};
      this.bundles.forEach(function(bundle) {
        return bundle._invalidate(true);
      });
      return this.emit('config');
    }));
    return this;
  }

  drop(bundle) {
    if (!arguments.length) {
      this.bundles.forEach(function(bundle) {
        return bundle.destroy();
      });
      return true;
    }
    this.bundles.delete(bundle);
    if (this.bundles.size === 0) {
      this.watcher.destroy();
      return delete projects[this.root.path];
    }
  }

  async _configure(bundle) {
    var config, err, fn, ref;
    // Bundle-specific configuration
    if (config = (ref = this.config.bundles) != null ? ref[bundle.main.name] : void 0) {
      if (typeof config.init === 'function') {
        try {
          await config.init.call(bundle);
        } catch (error) {
          err = error;
          log.error(err);
        }
      }
      if (Array.isArray(config.parsers)) {
        bundle.merge('parsers', config.parsers);
      }
      if (Array.isArray(config.plugins)) {
        await bundle.use(config.plugins);
      }
    }
    // Format-specific configuration
    if (fn = this.config[bundle.constructor.id]) {
      try {
        await fn.call(bundle);
      } catch (error) {
        err = error;
        log.error(err);
      }
    }
  }

};
