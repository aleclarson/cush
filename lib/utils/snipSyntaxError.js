// Generated by CoffeeScript 2.3.1
var inspect, log, screenWidth, snipSyntaxError, util;

util = require('util');

log = require('lodge').debug('cush');

screenWidth = process.stdout.columns - 2;

inspect = function(err) {
  return util.inspect({
    message: err.message,
    ...err
  }, {
    compact: true,
    colors: true
  });
};

// `err.line` must be one-based
// `err.column` must be zero-based
snipSyntaxError = function(content, err) {
  var code, column, end, length, line, maxLength, start;
  if (!(code = content.split('\n')[err.line - 1])) {
    throw RangeError(util.format('Invalid line: %s', inspect(err)));
  }
  line = err.line + ': ';
  column = err.column - code.length;
  code = code.trimLeft();
  column += length = code.length;
  maxLength = screenWidth - line.length;
  if (length > maxLength) {
    // Clip the left side.
    start = 0;
    if (err.column > maxLength) {
      start = code.lastIndexOf(' ', err.column);
      if (start === -1) {
        start = column - 3;
      }
      column += 3 - start;
      length -= start;
      maxLength -= 3;
    }
    // Clip the right side.
    if (length > maxLength) {
      length = maxLength - 3;
      end = start + length;
    // Ensure all available space is used.
    } else if (start && length < maxLength) {
      length = maxLength;
      column += start;
      column -= start = code.length - length;
    }
    code = code.slice(start, end);
    if (start) {
      code = log.coal('...') + code;
    }
    if (end) {
      code += log.coal('...');
    }
  }
  column = Math.max(column + line.length, line.length);
  if (column > screenWidth) {
    throw RangeError(util.format('Invalid column: %O', inspect(err)));
  }
  return `${log.red(line)}${code}\n${' '.repeat(column)}${log.red('^')}`;
};

module.exports = snipSyntaxError;
